### Optional Pattern

In Java, Optional doesn't solve the NPE problem. It just wraps it and "protects" our return values.

```java
Optional<String> getCity(String user) {
  var city = getOptionalCity(user);
  if (city != null) 
    return Optional.of(city);
  else
    return Optional.empty();
}
```

It should not be used on parameters or properties.

```java
getPermissions(user, null);
getPermissions(user, Optional.empty());  // Not recommended
```

Solution: Nullability is built into the type system.
String != String

```kotlin
val myString: String = "hello"
val nullableString: String? = null   // correct!!
```

```kotlin
myString = null         // Compiler error
nullableString.length   // Compiler error, since the checking has not been done
```

This works for parameters, return types, properties and generics.

```kotlin
val list: List<String>
list.add(null)   // Compiler error
```

### Overloading Methods

```java
void log(String msg) { ......... }
void log(String msg, String level) { ......... }
void log(String msg, String level, String ctx) { ......... }
```

In kotlin we declare only one function, because we have default arguments and named arguments.

```kotlin
fun log(
    msg: String, 
    level: String = "INFO", 
    ctx: String = "main"
) { 
......... 
}

```kotlin
log(level="DEBUG", msg="trace B")
```

### Utility class with static methods

```java
final class NumberUtils {
  public static boolean isEven(final int i) {
    return i % 2 == 0;
  }
}
```

In some projects we may end up declaring the same utility function more than once.

```kotlin
fun Int.isEven() = this % 2 == 0  // Extension function

2.isEven()
```

```kotlin
val Int.isEven: Boolean          // Extension property
  get() = this % 2 == 0

2.isEven()
```

### Factory

```java
public class NotificationFactory {

  public static Notification createNotification(
        final NotificationType type
  ) {
      return switch(type) {
        case Email -> new EmailNotification();
        case SMS -> new SmsNotification();
      };
  }
}
```

In Kotlin a function is used instead of an interface

```kotlin
//  This would be a code smell in Java
fun Notification(type: NotificationType) = when(type) {
    NotificationType.Email -> EmailNotification()
    NotificationType.SMS -> SmsNotification()
  }
}

val notification = Notification(NotificationType.Email)
```

### Singleton

```java
// Much code, it's not even thread-safe
public final class MySingleton {
    private static final MySingleton INSTANCE;

    private MySingleton() {}

    public static MySingleton getInstance() {
        if (INSTANCE == null) {
            INSTANCE = new MySingleton();
        }
        return INSTANCE;
    }
}
```

This pattern is built into the Kotlin language. It's lazy and thread-safe.

```kotlin
object Singleton {
  val myProperty......
  fun myInstanceMethod() {
    ...............
  }
}
```

### Building maps

```java
var map = Map.of(
    "key1", "value1",
    "key2", "value2",
);
```

```kotlin
val map = MapOf(
    "key1" to "value1",    // "to" is an extension function
    "key2" to "value2"
)
```

### Iterator

This can be applied only to collections, not to user defined classes.

```java
List<String> list = new ArrayList<>();
list.add("A");
list.add("B");
list.add("C");

var iterator = list.iterator();
while (iterator.hasNext()) {
    String element = iterator.next();
    System.out.println(element);   // A, B, C
}
```

```kotlin
val list = listOf("A", "B", "C")
for (elem in list) {
  println(elem)
}
```

This can be applied to any class that has the **iterator** operator function defined.

```kotlin
class School(
  val students: List<Student> = listOf(),
  val teachers: List<Teacher> = listOf()
)

operator fun School.iterator() = iterator<Person> {  // Extension function
  yieldAll(teachers)
  yieldAll(students)
}

val mySchool = School()
for (person in mySchool) {
  println(person)
}
```

Likewise, the operator function **compareTo** must be used to compare objects. 

### Comparable

```kotlin
class School(val students: List<Student>, val teachers: List<Teacher>) 

override fun School.compareTo(other: School) =
    students.size.compareTo(other.students.size)

fun main() {
    val school1 = School(listOf(Student("John"), Student("Alice")), listOf(Teacher("Mr. Smith")))
    val school2 = School(listOf(Student("Bob"), Student("Eve"), Student("Carol")), listOf(Teacher("Mrs. Johnson")))

    if (school1 > school2) {
        println("$school1 has more students than $school1")
    }
}
```

### Strategy pattern

```kotlin
data class Book(val title: String, val price: Double)
data class Customer(val name: String, val membershipType: MembershipType)
enum class MembershipType {
    REGULAR, PREMIUM
}
```

Without any pattern 

```kotlin
class DiscountCalculator {
    fun calculateDiscount(book: Book, customer: Customer): Double {
        return if (customer.membershipType == MembershipType.REGULAR) {
            book.price * 0.1
        } else {
            book.price * 0.2
        }
    }
}
```

```kotlin
interface DiscountStrategy {
    fun calculateDiscount(book: Book): Double
}

class RegularCustomerDiscountStrategy : DiscountStrategy {
    override fun calculateDiscount(book: Book): Double {
        return book.price * 0.1
    }
}

class PremiumCustomerDiscountStrategy : DiscountStrategy {
    override fun calculateDiscount(book: Book): Double {
        return book.price * 0.2
    }
}
```

```kotlin
class DiscountCalculator(val discountStrategy: DiscountStrategy) {
    fun calculateDiscount(book: Book): Double {
        return discountStrategy.calculateDiscount(book)
    }
}
```


















